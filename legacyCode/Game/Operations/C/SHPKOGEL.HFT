/*=====================================================================*/
/*                                                                     */
/* PROGRAMMA NAAM:	Beheert de shipkogellist  (shpkogel.hft)       */
/* AUTEUR:              Resourser                                      */
/* BESCHRIJVING:                                                       */
/*   Dit is de hulpfile van de shipkogeldata. De kogels worden         */
/*   beheert dmv een dynamische kogelobjectenlijst.                    */
/*   De lijst kan benaderd worden dmv de diverse onderstaande functies */
/*								       */
/* INPUT PAR:              geen                                        */
/* OUPUT PAR:              geen                                        */
/* DATUM:                  12 april 1997                               */
/*=====================================================================*/

inline void Shipkogels::createkogel()
  {
   vector kogelpos = ship.getshipposition();
   vector kogelvel;

   float  shipangle = ((float)ship.getanglenr() / aantalangles) * P2I;          // tov de verticaal

   kogelvel.X = kogelvelocity * -sin(shipangle) + ship.getshipballvelocity().X;
   kogelvel.Y = kogelvelocity * -cos(shipangle) + ship.getshipballvelocity().Y;

   kogelpos.X += (kogelvelocity * -sin(shipangle) / kogelvelocity) * (bloklengte/2+2);
   kogelpos.Y += (kogelvelocity * -cos(shipangle) / kogelvelocity) * (blokhoogte/2+2);

   kogelelement *ptr = startptr; // oude inhoud van de startptr bewaren

   startptr = new kogelelement;  // inhoud van de startptr wijst naar het nieuw gecreerde object
   if (startptr == NULL)
     {cout << "geheugenprobleem"; exit(-1);}

   startptr ->kgl.initkogel(kogelpos,kogelvel,kogelptr); // via startptr het object initialiseren
   startptr ->volg = ptr;        // de ptr van de kogel neemt de bewaarde inhoud van de startptr over
  }


inline void Shipkogels::updatekogel()
  {
   if ((*huidigptr)->kgl.calckogel() == delkogel) // de inhoud van de huidigptr wijst naar een ptr die weer naar een kogelobject wijst
     deletekogel();
   else huidigptr = &((*huidigptr)->volg); // de inhoud van huidigptr wordt gevuld met het
  }                                        // adres van de kogelptr waar de oude huidigptr naar wijst


inline void Shipkogels::deletekogel()
  {
   kogelelement *ptr = *huidigptr;
   *huidigptr = (*huidigptr)->volg;        // de inhoud van kogelptr waar huidigptr naar wijst wordt gevuld met de inhoud
   delete ptr;                             // van de kogelptr waar de inhoud van kogelptr naar wijst die op zijn beurt weer
  }                                        // aangewezen wordt door de inhoud van de huidigptr (oke, heel moeilijk)


inline void Shipkogels::drawkogel()
  {
   (*huidigptr)->kgl.drawkogel();
   huidigptr = &((*huidigptr)->volg); // de inhoud van huidigptr wordt gevuld met het
  }                                   // adres van de kogelptr waar de oude huidigptr naar wijst


inline void Shipkogels::wipekogel()
  {
   (*huidigptr)->kgl.wipeoldkogel();
   huidigptr = &((*huidigptr)->volg); // de inhoud van huidigptr wordt gevuld met het
  }                                   // adres van de kogelptr waar de oude huidigptr naar wijst

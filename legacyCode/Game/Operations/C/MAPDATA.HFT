/*=====================================================================*/
/*                                                                     */
/* PROGRAMMA NAAM:      Extra map module    (Map.hft)                  */
/* AUTEUR:              Resourser                                      */
/* BESCHRIJVING:                                                       */
/*   In deze module staan de hulpfuncties voor de module mapdata.cpp   */
/*   De module heeft op zijn beurt weer een hulpfunctie *.hf2          */
/*                                                                     */
/* INPUT PAR:              geen                                        */
/* OUPUT PAR:              geen                                        */
/* DATUM:                  2 februari 1997                             */
/*=====================================================================*/

#include	"operat~1\c\mapdata.hf2"


void Mapdata::updatemapblocks()
  {
   static char counter; // om de snelheid te beperken
   intvec mapcoor;
   char   mapsoort;

   if ((counter++ & reactorstatusslowdown) == 0)
     updatereactorstatus();

   for (mapcoor.Sy = basismapcoor.Sy-4; mapcoor.Sy < basismapcoor.Sy+Yblokken+4; mapcoor.Sy++)
     for (mapcoor.Sx = basismapcoor.Sx-4; mapcoor.Sx < basismapcoor.Sx+Xblokken+4; mapcoor.Sx++)
       {
        mapsoort = mapdata[checkmapcoor(mapcoor)][mapcoor.Sy].soort;
        if (mapsoort < empty)
          {
           if ((mapcoor.Sx >= 0) && (mapcoor.Sx < maplengte))
             updatemapblock(mapcoor, mapsoort);
           updatestar(mapcoor, mapsoort); // moet ook geupdated worden buiten het veld
          }
       }
  }


void Mapdata::drawbackground()
  {
   intvec mapcoor;
   intvec screenposition = {0,0};
   bouwsteen *blokptr;

   for (mapcoor.Sy = basismapcoor.Sy; mapcoor.Sy < basismapcoor.Sy+Yblokken; mapcoor.Sy++)
     {
      for (mapcoor.Sx = basismapcoor.Sx; mapcoor.Sx < basismapcoor.Sx+Xblokken; mapcoor.Sx++)
        {
         if (mapdata[checkmapcoor(mapcoor)][mapcoor.Sy].status)
           {
	    blokptr = &build.blok[mapdata[checkmapcoor(mapcoor)][mapcoor.Sy].soort];
	    move.drawsteady(screenposition,blokptr);
            mapdata[checkmapcoor(mapcoor)][mapcoor.Sy].status--;
           }
         screenposition.Sx += bloklengte;
        }
      screenposition.Sx = 0;
      screenposition.Sy += blokhoogte;
     }
  }

void Mapdata::drawshiftbackground()
  {
   intvec mapcoor = {basismapcoor.Sx,basismapcoor.Sy};
   intvec screenposition = {-poscoormod.Sx,-poscoormod.Sy};
   bouwsteen *blokptr;
                                                                                             // rand boven opvullen
   for (mapcoor.Sx = basismapcoor.Sx; mapcoor.Sx <= basismapcoor.Sx+Xblokken; mapcoor.Sx++)
     {
      blokptr = &build.blok[mapdata[checkmapcoor(mapcoor)][mapcoor.Sy].soort];
      move.drawpart(screenposition,poscoormod,blokptr);
      screenposition.Sx += bloklengte;
     }

   screenposition.Sx = -poscoormod.Sx;
   screenposition.Sy += blokhoogte;

   for (mapcoor.Sy = basismapcoor.Sy+1; mapcoor.Sy < basismapcoor.Sy+Yblokken; mapcoor.Sy++)
     {
      mapcoor.Sx = basismapcoor.Sx; // voor checkmapcoor (Xcoor resetten)                                                                                       // blok links opvullen
      blokptr = &build.blok[mapdata[checkmapcoor(mapcoor)][mapcoor.Sy].soort];
      move.drawpart(screenposition,poscoormod,blokptr);
      screenposition.Sx += bloklengte;
                                                                                              // regel opvullen
      for (mapcoor.Sx = basismapcoor.Sx+1; mapcoor.Sx < basismapcoor.Sx+Xblokken; mapcoor.Sx++)
        {
         blokptr = &build.blok[mapdata[checkmapcoor(mapcoor)][mapcoor.Sy].soort];
	 move.drawsteady(screenposition,blokptr);
         screenposition.Sx += bloklengte;
        }
                                                                                             // blok rechts opvullen
      blokptr = &build.blok[mapdata[checkmapcoor(mapcoor)][mapcoor.Sy].soort];
      move.drawpart(screenposition,poscoormod,blokptr);
      screenposition.Sx = -poscoormod.Sx;
      screenposition.Sy += blokhoogte;
     }

   screenposition.Sx = -poscoormod.Sx;

   for (mapcoor.Sx = basismapcoor.Sx; mapcoor.Sx <= basismapcoor.Sx+Xblokken; mapcoor.Sx++)
     {
      blokptr = &build.blok[mapdata[checkmapcoor(mapcoor)][mapcoor.Sy].soort];
      move.drawpart(screenposition,poscoormod,blokptr);
      screenposition.Sx += bloklengte;
     }
  }

void Mapdata::updatescreenshift()
  {
   // left - right
   if      (shiftscreen.ScrX == off)
     {
      if      (ship.getshipposition().X > (basismapposition.Sx + Xscrshiftrgpos)) shiftscreen.ScrX = right;
      else if (ship.getshipposition().X < (basismapposition.Sx + Xscrshiftlfpos)) shiftscreen.ScrX = left;
     }
   else if (shiftscreen.ScrX == left)
     {
      if ((ship.getshipposition().X < Xscreenmidpos + basismapposition.Sx) || (poscoormod.Sx != 0))
        {
         if (ship.getshipposition().X < Xscrgrenslfpos + basismapposition.Sx)
           basismapposition.Sx += int((ship.getshipposition().X - (Xscrgrenslfpos + basismapposition.Sx))) & 0xfffe;
         basismapposition.Sx -= 2;
        }
      else
        {
         shiftscreen.ScrX = off;
         drawonetime = true;
        }
     }
   else
     {
      if ((ship.getshipposition().X > Xscreenmidpos + basismapposition.Sx) || (poscoormod.Sx != 0))
        {
         if (ship.getshipposition().X > Xscrgrensrgpos + basismapposition.Sx)
           basismapposition.Sx += int((ship.getshipposition().X - (Xscrgrensrgpos + basismapposition.Sx))) & 0xfffe;
         basismapposition.Sx += 2;
        }
      else
        {
         shiftscreen.ScrX = off;
         drawonetime = true;
        }
     }
   // up - down
   if      (shiftscreen.ScrY == off)
     {
      if      (ship.getshipposition().Y > (basismapposition.Sy + Yscrshiftdnpos)) shiftscreen.ScrY = down;
      else if (ship.getshipposition().Y < (basismapposition.Sy + Yscrshiftuppos)) shiftscreen.ScrY = up;
     }
   else if (shiftscreen.ScrY == up)
     {
      if ((ship.getshipposition().Y < Yscreenmidpos + basismapposition.Sy) || (poscoormod.Sy != 0))
        {
         if (ship.getshipposition().Y < Yscrgrensuppos + basismapposition.Sy)
           basismapposition.Sy += int((ship.getshipposition().Y - (Yscrgrensuppos + basismapposition.Sy))) & 0xfffe;
         basismapposition.Sy -= 2;
        }
      else
        {
         shiftscreen.ScrY = off;
         drawonetime = true;
        }
     }
   else
     {
      if ((ship.getshipposition().Y > Yscreenmidpos + basismapposition.Sy) || (poscoormod.Sy != 0))
        {
         if (ship.getshipposition().Y > Yscrgrensdnpos + basismapposition.Sy)
           basismapposition.Sy += int((ship.getshipposition().Y - (Yscrgrensdnpos + basismapposition.Sy))) & 0xfffe;
         basismapposition.Sy += 2;
        }
      else
        {
         shiftscreen.ScrY = off;
         drawonetime = true;
        }
     }
  }


shieldcapture Mapdata::checkballreach()
  {
   int    vectorsom;
   intvec afstand;

   afstand.Sx = (checkcoor.Sx * bloklengte + (bloklengte / 2)) - ship.getshipposition().X;
   afstand.Sy = (checkcoor.Sy * blokhoogte + (blokhoogte / 2)) - ship.getshipposition().Y;

   vectorsom = sqrt(afstand.Sx * afstand.Sx + afstand.Sy * afstand.Sy);

   if (vectorsom < stanglength)
     return(ballcapt);
   else return(ballbalanced);
  }



/*=====================================================================*/
/*                                                                     */
/* PROGRAMMA NAAM:	Klasse shipkogel 	(shipkogel.hf2)	       */
/* AUTEUR:              Resourcer                                      */
/* BESCHRIJVING:                                                       */
/*   In deze file staat de implementatie van de classe kogel           */
/*   De klasse wordt voor gebruik eenvoudig bij de gebruikersfile      */
/*   geincluded.                                                       */
/*                                                                     */
/*								       */
/* INPUT PAR:              geen                                        */
/* OUPUT PAR:              geen                                        */
/* DATUM:                  12 april 1997                               */
/*=====================================================================*/

void Shipkogel::initkogel(vector position, vector velocity ,kogelbouwsteen *blokptr)
  {
   Shipkogel::position = position;
   Shipkogel::velocity = velocity;
   startkogelptr       = blokptr;
   kogelsoort  = 0;
   kogeltouch   = false;
   oldkogelptr  = startkogelptr;

   olddrawposition.Sx  = int(position.X);
   olddrawposition.Sy  = int(position.Y);
  }


kogelhit Shipkogel::calckogel()
  {
   kogelhit kogel = njet;

   if (kogelsoort !=0)
     {
      if ((kogelsoort % kogelexplsoorten) == 0)
        kogel = delkogel;
      else kogelsoort++;
     }
   else if ((kogeltouch) && (position.Y >= (rockdepth-1) * blokhoogte))
     {
      kogel = map.checkshipkogelposition(position);
      if (kogel == shield) kogelsoort ++;
      else kogelsoort+=(kogelexplsoorten+1);
     }

   else if ((position.X < map.getbasismapposition().Sx-kogelrand) || (position.X > (map.getbasismapposition().Sx + screenlengte+kogelrand)) ||
            (position.Y < map.getbasismapposition().Sy-kogelrand) || (position.Y > (map.getbasismapposition().Sy + screenhoogte+kogelrand)))
     kogel = delkogel;

   else
     {
      position.X += velocity.X * cyclustime;
      position.Y += velocity.Y * cyclustime;
     }

   return(kogel);
  }


void Shipkogel::drawkogel()
  {
   intvec position = {Shipkogel::position.X-map.getbasismapposition().Sx,
                      Shipkogel::position.Y-map.getbasismapposition().Sy};
   kogelbouwsteen *drawptr = startkogelptr+kogelsoort;

   olddrawposition = position;
   oldkogelptr = drawptr;
   if ((position.Sx > screenrand) && (position.Sx < Xblokken * bloklengte- screenrand) &&
       (position.Sy > screenrand) && (position.Sy < Yblokken * blokhoogte- screenrand))
     if (move.drawsmall(position, drawptr))
       kogeltouch = true;
  }


void Shipkogel::wipeoldkogel()
  {
   if ((olddrawposition.Sx > screenrand) && (olddrawposition.Sx < Xblokken * bloklengte- screenrand) &&
       (olddrawposition.Sy > screenrand) && (olddrawposition.Sy < Yblokken * blokhoogte- screenrand))
   move.wipesmall(olddrawposition, oldkogelptr);
  }

/*=====================================================================*/
/*                                                                     */
/* PROGRAMMA NAAM:      Extra map module    (Map.hft)                  */
/* AUTEUR:              Resourser                                      */
/* BESCHRIJVING:                                                       */
/*   In deze module staan de hulpfuncties voor de module mapdata.cpp   */
/*   mapdata.hf3                                                       */
/*                                                                     */
/* INPUT PAR:              geen                                        */
/* OUPUT PAR:              geen                                        */
/* DATUM:                  2 februari 1997                             */
/*=====================================================================*/

inline void Mapdata::setupdaterequest(intvec mapcoor)
  {mapdata[checkmapcoor(mapcoor)][mapcoor.Sy].status = updaterequest;}
inline void Mapdata::setlongupdaterequest(intvec mapcoor)
  {mapdata[checkmapcoor(mapcoor)][mapcoor.Sy].status = longupdaterequest;}

inline int Mapdata::checkmapcoor(intvec mapcoor)
  {
   //   controleert of de mapcoor wordt overschreden
   int Xmapcoor = 0;

   if ((mapcoor.Sx < 0) || (mapcoor.Sx >= maplengte))
     {
      if (mapcoor.Sy < rockdepth)
        if ((Xmapcoor = mapcoor.Sx % maplengte) < 0) Xmapcoor += maplengte;
     }
   else Xmapcoor = mapcoor.Sx;
   return(Xmapcoor);
  }


void Mapdata::openlaser(intvec mapcoor)
  {
   // button kan alleen naar laserdown of naar laserright wijzen
   intvec lasercoor;
   lasercoor.Sx = mapdata[mapcoor.Sx][mapcoor.Sy].Xextra;
   lasercoor.Sy = mapdata[mapcoor.Sx][mapcoor.Sy].Yextra;

   if (mapdata[lasercoor.Sx][lasercoor.Sy].soort == laserdown)
     while (mapdata[lasercoor.Sx][++lasercoor.Sy].soort != laserup)
       {
        mapdata[lasercoor.Sx][lasercoor.Sy].soort = empty;
        setupdaterequest(lasercoor);
       }
   else
     while (mapdata[++lasercoor.Sx][lasercoor.Sy].soort != laserleft)
       {
        mapdata[lasercoor.Sx][lasercoor.Sy].soort = empty;
        setupdaterequest(lasercoor);
       }
  }


void Mapdata::closelaser(intvec mapcoor)
  {
   intvec lasercoor;
   lasercoor.Sx = mapdata[mapcoor.Sx][mapcoor.Sy].Xextra;
   lasercoor.Sy = mapdata[mapcoor.Sx][mapcoor.Sy].Yextra;

   if (mapdata[lasercoor.Sx][lasercoor.Sy].soort == laserdown)
     {
      char lasertype = mapdata[lasercoor.Sx][lasercoor.Sy].Xextra;
        while (mapdata[lasercoor.Sx][++lasercoor.Sy].soort != laserup)
          {
           mapdata[lasercoor.Sx][lasercoor.Sy].soort = lasertype;
           setupdaterequest(lasercoor);
           }
     }
   else
     {
      char lasertype = mapdata[lasercoor.Sx][lasercoor.Sy].Xextra;
      while (mapdata[++lasercoor.Sx][lasercoor.Sy].soort != laserleft)
        {
         mapdata[lasercoor.Sx][lasercoor.Sy].soort = lasertype;
         setupdaterequest(lasercoor);
        }
     }
  }


void Mapdata::backgroundupdaterequest(vector kogelposition)
  {
   // zorgt dat nadat de kogel een blok geraakt heeft deze opnieuw getekend wordt
   intvec kogelcoor = {kogelposition.X / bloklengte, (kogelposition.Y) / blokhoogte};

   if (((int)kogelposition.X % bloklengte) < bloklengte /2)
     kogelcoor.Sx--;
   if (((int)kogelposition.Y % blokhoogte) < blokhoogte /2)
     kogelcoor.Sy--;
   setlongupdaterequest(kogelcoor);
   kogelcoor.Sx++;
   setlongupdaterequest(kogelcoor);
   kogelcoor.Sx--; kogelcoor.Sy++;
   setlongupdaterequest(kogelcoor);
   kogelcoor.Sx++;
   setlongupdaterequest(kogelcoor);
  }

